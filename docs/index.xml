<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Panaderia</title>
    <link>https://saahilclaypool.github.io/panaderia/</link>
    <description>Recent content on The Panaderia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://saahilclaypool.github.io/panaderia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BBR: Congestion-Based Congestion Control</title>
      <link>https://saahilclaypool.github.io/panaderia/background/bbr_congestion_based/</link>
      <pubDate>Sun, 11 Nov 2018 12:16:04 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/background/bbr_congestion_based/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Measuring bottleneck bandwidth and round-trip propagation time&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>The Raspberry Pis</title>
      <link>https://saahilclaypool.github.io/panaderia/config/pi/</link>
      <pubDate>Sat, 10 Nov 2018 16:01:46 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/config/pi/</guid>
      <description>&lt;p&gt;For our servers and clients, we used 8 raspberry pi 3B+ running a modified Raspbian image. Each of these can be purchased for under $50. As they run Linux, they are able to run all of the different congestion control algorithms (specially, we are interested in BBR).&lt;/p&gt;

&lt;p&gt;We provide information on the steps we took to recompile the Kernel, as well as performance measurements for the Pis.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Experimental Evaluation of BBR Congestion Control</title>
      <link>https://saahilclaypool.github.io/panaderia/background/bbr_experimental/</link>
      <pubDate>Sun, 11 Nov 2018 12:16:04 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/background/bbr_experimental/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Mario Hock, Roland Bless, Martina Zitterbart
Karlsruhe Institute of Technology
Karlsruhe, Germany&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Validates BBR with a series of tests. Discusses the following limitations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Estimate of bandwidth is available share.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Esimate of bandwidth is &lt;em&gt;always&lt;/em&gt; too high.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>CS244 2017: ReBBR: Reproducing BBR Performance in Lossy Networks</title>
      <link>https://saahilclaypool.github.io/panaderia/background/bbr_reproducing_in_lossy/</link>
      <pubDate>Sun, 11 Nov 2018 12:16:04 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/background/bbr_reproducing_in_lossy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Luke Hsia and Jervis Muindi&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>PCC: Re-architecting Congestion Control for Consistent High Performance</title>
      <link>https://saahilclaypool.github.io/panaderia/background/pcc/</link>
      <pubDate>Sun, 11 Nov 2018 12:16:04 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/background/pcc/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Mo Dong et. al. 15&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A congestion control protocol using a &amp;lsquo;black-box&amp;rsquo; approach to networks. The algorithm relies on utility functions and mini experiments to adjust sending rate.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Router</title>
      <link>https://saahilclaypool.github.io/panaderia/config/router/</link>
      <pubDate>Sat, 10 Nov 2018 16:45:46 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/config/router/</guid>
      <description>&lt;p&gt;The router is an ubuntu desktop with 3 nic cards. One card is used for the normal &amp;lsquo;wide area network&amp;rsquo;, and the other two cards are used to route between the two raspberry pi subnets. This is done using netplan on ubuntu, and editing the dhcpd.conf to set up static ip addresses. Also, the host files for each machine are edited to make tests more convenient.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Copa: Practical Delay-Based Congestion Control for the Internet</title>
      <link>https://saahilclaypool.github.io/panaderia/background/copa/</link>
      <pubDate>Sun, 11 Nov 2018 12:16:04 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/background/copa/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Venkat Arun et. al. NSDI 2018&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uses a black-box approach to congestion control similar to PCC. This improves on PCC&amp;rsquo;s experiment idea and includes delay in its utility function.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding congestion control protocols</title>
      <link>https://saahilclaypool.github.io/panaderia/config/congestion_control/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/config/congestion_control/</guid>
      <description>&lt;p&gt;The linux kernel comes with a number of different congestion control algorithms. To test new congestion control methods we to be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dynamically select new protocols&lt;/li&gt;
&lt;li&gt;Recompile and install new protocols&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Running an Experiment</title>
      <link>https://saahilclaypool.github.io/panaderia/config/run_experiment/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/config/run_experiment/</guid>
      <description>&lt;p&gt;A typical experiment involves setting the congestion control protocols for each raspberry pi, setting the bandwidth and latency parameters for the router, and running a packet capture on each sender and client to monitor the flow.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parsing and Plotting Captures</title>
      <link>https://saahilclaypool.github.io/panaderia/config/parse_pcap/</link>
      <pubDate>Sat, 24 Nov 2018 16:44:20 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/config/parse_pcap/</guid>
      <description>&lt;p&gt;The &lt;code&gt;start_trial&lt;/code&gt; script described &lt;a href=&#34;https://saahilclaypool.github.io/panaderia/config/run_experiment&#34;&gt;here&lt;/a&gt; copies 8 packet capture (pcap) files to a local &amp;lsquo;Results&amp;rsquo; directory. This page describes the tools used to parse these captures and create plots of the goodput (throughput seen by the receiver), the round trip times (for the sender) and the packets in flight (for the sender).&lt;/p&gt;

&lt;p&gt;The goal is to parse each experiment, the 8 pcap files, into 8 csv files, and then to create plot like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://saahilclaypool.github.io/panaderia/80m_multi_tbf.png&#34; alt=&#34;plot&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving the Experiment setup</title>
      <link>https://saahilclaypool.github.io/panaderia/config/experiments_improved/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/config/experiments_improved/</guid>
      <description>&lt;p&gt;Being able to quickly run &lt;em&gt;and rerun&lt;/em&gt; experiments is vital in ensuring that the tweaks we make to our testbed are having the effects that we expect. Specifically, we needed to be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Setup the router with the correct parameters&lt;/p&gt;

&lt;p&gt;Increasing or decreasing the bandwidth, latency, buffer size etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Orchestrate the raspberry pi startup&lt;/p&gt;

&lt;p&gt;This involves starting up &lt;code&gt;N&lt;/code&gt; flows per raspberry pi, and measuring their performance over the course of the experiment session.&lt;/p&gt;

&lt;p&gt;And, for each raspberry pi, needed to start a packet capture to analyze the results post experiment.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Poll the router as the experiment progresses&lt;/p&gt;

&lt;p&gt;This allows us to see the &amp;lsquo;ground truth&amp;rsquo; for how many packets are in flight or dropped. (Currently, we only keep track of the router queue size).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pull in all of the captures to the &amp;lsquo;router&amp;rsquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parse the captures into CSV files and create consistent plots&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By wrapping all of these procedures in a single script, we are able to quickly change configurations and create plots in an &lt;em&gt;identical&lt;/em&gt; manner. The reproducibility of this setup is key in allowing us to compare results across different configurations in a consistent manner.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cyclic Performance of BBR and Cubic</title>
      <link>https://saahilclaypool.github.io/panaderia/validation/cyclic_performance/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/validation/cyclic_performance/</guid>
      <description>&lt;p&gt;In the paper &amp;ldquo;Cycle and Divergence of Performance on TCP BBR&amp;rdquo; by Miyazawa and Sasaki, the authors show that when BBR and TCP are competing on the same bottleneck, their &amp;lsquo;share&amp;rsquo; of the bandwidth will &lt;em&gt;not&lt;/em&gt; be consistent. Rather, the dominant flows will cycle between cubic and BBR, where first BBR will dominate the flow for 10 seconds as cubic backs off, and then cubic will dominate the flow as is steals bandwidth during BBR&amp;rsquo;s rtt probe phase. We aim to confirm this in our &lt;code&gt;panaderia&lt;/code&gt; environment. This cyclic behavior shown in this paper is depicted here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://saahilclaypool.github.io/panaderia/papers/cyclic.png&#34; alt=&#34;here&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Single flow</title>
      <link>https://saahilclaypool.github.io/panaderia/validation/single_flow/</link>
      <pubDate>Fri, 23 Nov 2018 10:01:37 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/validation/single_flow/</guid>
      <description>&lt;p&gt;A single bbr flow should display a very regular cycle. Every 8 rtt&amp;rsquo;s (round trip times) bbr should probe the bandwidth by increasing its sending rate, drain any queue that is built, and then return to a steady state. Every 10 seconds, the flow should completely drain the queue by throttling its speed, and then return to a normal sending rate.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multiple Flow Convergence</title>
      <link>https://saahilclaypool.github.io/panaderia/validation/multiple_flows/</link>
      <pubDate>Sat, 10 Nov 2018 16:26:54 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/validation/multiple_flows/</guid>
      <description>&lt;p&gt;Given multiple bbr flows competing at the same bottleneck, all of the flows should sync. BBR has a mechanism to
drain the queue and check for a lowest round trip time after some amount of seconds &lt;em&gt;since the last time the round trip time changed&lt;/em&gt;. With multiple flows, they &lt;em&gt;all&lt;/em&gt; should see the change in round trip time at the same time, so they should begin to drain the queue at the same time.&lt;/p&gt;

&lt;p&gt;The goodput (throughput seen by the receiver) should looks something like this result published by the BBR team in &lt;a href=&#34;https://cacm.acm.org/magazines/2017/2/212428-bbr-congestion-based-congestion-control/fulltext&#34;&gt;this paper&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deliveryimages.acm.org/10.1145/3010000/3009824/figs/f8.jpg&#34; alt=&#34;Syncing of Multiple Flows&#34; /&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;And our results, which look roughly similar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://saahilclaypool.github.io/panaderia/results/4_throughput.svg&#34; alt=&#34;Our Results&#34; /&gt;&lt;/p&gt;

&lt;p&gt;See below for the configuration details and analysis&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://saahilclaypool.github.io/panaderia/about/</link>
      <pubDate>Sat, 10 Nov 2018 16:00:22 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/about/</guid>
      <description>About Me:</description>
    </item>
    
  </channel>
</rss>