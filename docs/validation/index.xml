<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Validation on The Panaderia</title>
    <link>https://saahilclaypool.github.io/panaderia/validation/</link>
    <description>Recent content in Validation on The Panaderia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Nov 2018 16:26:54 -0500</lastBuildDate>
    
	<atom:link href="https://saahilclaypool.github.io/panaderia/validation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cyclic Performance of BBR and Cubic</title>
      <link>https://saahilclaypool.github.io/panaderia/validation/cyclic_performance/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/validation/cyclic_performance/</guid>
      <description>&lt;p&gt;In the paper &amp;ldquo;Cycle and Divergence of Performance on TCP BBR&amp;rdquo; by Miyazawa and Sasaki, the authors show that when BBR and TCP are competing on the same bottleneck, their &amp;lsquo;share&amp;rsquo; of the bandwidth will &lt;em&gt;not&lt;/em&gt; be consistent. Rather, the dominant flows will cycle between cubic and BBR, where first BBR will dominate the flow for 10 seconds as cubic backs off, and then cubic will dominate the flow as is steals bandwidth during BBR&amp;rsquo;s rtt probe phase. We aim to confirm this in our &lt;code&gt;panaderia&lt;/code&gt; environment. This cyclic behavior shown in this paper is depicted here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://saahilclaypool.github.io/panaderia/papers/cyclic.png&#34; alt=&#34;here&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Single flow</title>
      <link>https://saahilclaypool.github.io/panaderia/validation/single_flow/</link>
      <pubDate>Fri, 23 Nov 2018 10:01:37 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/validation/single_flow/</guid>
      <description>&lt;p&gt;A single bbr flow should display a very regular cycle. Every 8 rtt&amp;rsquo;s (round trip times) bbr should probe the bandwidth by increasing its sending rate, drain any queue that is built, and then return to a steady state. Every 10 seconds, the flow should completely drain the queue by throttling its speed, and then return to a normal sending rate.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multiple Flow Convergence</title>
      <link>https://saahilclaypool.github.io/panaderia/validation/multiple_flows/</link>
      <pubDate>Sat, 10 Nov 2018 16:26:54 -0500</pubDate>
      
      <guid>https://saahilclaypool.github.io/panaderia/validation/multiple_flows/</guid>
      <description>&lt;p&gt;Given multiple bbr flows competing at the same bottleneck, all of the flows should sync. BBR has a mechanism to
drain the queue and check for a lowest round trip time after some amount of seconds &lt;em&gt;since the last time the round trip time changed&lt;/em&gt;. With multiple flows, they &lt;em&gt;all&lt;/em&gt; should see the change in round trip time at the same time, so they should begin to drain the queue at the same time.&lt;/p&gt;

&lt;p&gt;The goodput (throughput seen by the receiver) should looks something like this result published by the BBR team in &lt;a href=&#34;https://cacm.acm.org/magazines/2017/2/212428-bbr-congestion-based-congestion-control/fulltext&#34;&gt;this paper&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deliveryimages.acm.org/10.1145/3010000/3009824/figs/f8.jpg&#34; alt=&#34;Syncing of Multiple Flows&#34; /&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;And our results, which look roughly similar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://saahilclaypool.github.io/panaderia/results/4_throughput.svg&#34; alt=&#34;Our Results&#34; /&gt;&lt;/p&gt;

&lt;p&gt;See below for the configuration details and analysis
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>